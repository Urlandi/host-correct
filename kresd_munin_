#!/bin/sh
#
# *************************************************************
#
# Original wrote for unbound server by:
#
# (C) 2008 W.C.A. Wijngaards.  BSD Licensed.
#
# and it's source code may be found on 
# https://github.com/dnstap/unbound/blob/master/contrib/unbound_munin_
#
# *************************************************************
#
# plugin for munin to monitor usage of knot-resolver servers 
# built-in stats counters
#
# To install copy this to /usr/local/share/munin/plugins/kresd_munin_
# and use munin-node-configure (--suggest, --shell).
#
# (C) 2020 Michael Vasilyev.  BSD Licensed.
#
# To install; enable stat module in kresd.conf
#
#     modules.load('stats')
#
# be sure about nc (netcat) is presents in a system
#
# Environment variables for this script
#    statefile        - where to put temporary statefile.
#    kresd_control    - directory where to find kresd control sockets.
#    nc_util          - name of netcat utility, common 'nc' or 'netcat'
#                       may be fullpath to it
#
# You can set them in your munin/plugin-conf.d/plugins.conf file
# with:
# [kresd*]
# user root
# env.statefile /var/lib/munin/plugin-state/kresd-state
# env.kresd_control /run/kresd/control
# env.nc_util nc
#
# This plugin can create different graphs depending on what name
# you link it as (with ln -s) into the plugins directory
# You can link it multiple times.
# If you are only a casual user, the _hits and _by_type are most interesting,
# possibly followed by _by_rcode.
#
#    kresd_munin_hits        - base volume, cache hits, unwanted traffic
#    kresd_munin_by_rcode    - answers by rcode, validation status
#    kresd_munin_by_flags    - incoming queries by flags
#    kresd_munin_histogram   - histogram of query resolving times
#
# Magic markers - optional - used by installation scripts and
# munin-config:  (originally contrib family but munin-node-configure ignores it)
#
#%# family=auto
#%# capabilities=autoconf suggest

# POD documentation
: <<=cut
=head1 NAME

kresd_munin_ - Munin plugin to monitor the Knot Resolver.

=head1 APPLICABLE SYSTEMS

System with knot-resolver daemon.

=head1 CONFIGURATION

  [kresd*]
  user root
  env.statefile /var/lib/munin/plugin-state/kresd-state
  env.kresd_control /run/knot-resolver/control
  env.nc_util nc

Use the .env settings to override the defaults.

=head1 USAGE

Can be used to present different graphs. Use ln -s for that name in
the plugins directory to enable the graph.
kresd_munin_hits         - base volume, cache hits, unwanted traffic
kresd_munin_by_rcode     - answers by rcode, validation status
kresd_munin_by_flags     - incoming queries by flags
kresd_munin_histogram    - histogram of query resolving times

=head1 AUTHOR

Copyright 2008 W.C.A. Wijngaards, Copyright 2020 Michael Vasilyev

=head1 LICENSE

BSD

=cut

set -o nounset

state=${statefile:-'/var/lib/munin/plugin-state/kresd-state'}
kresd_control=${kresd_control:-'/run/knot-resolver/control'}
nc_util=${nc_util:-'nc'}

exec_param=${1:-''}

# number of seconds between polling attempts.
# makes the statefile hang around for at least this many seconds,
# so that multiple links of this script can share the results.
lee=55

# to keep things within 19 characters
ABBREV="-e s/request/r/; s/answer/a/; s/query/q/; s/predict/p/; \
s/1500ms/15/; s/1000ms/1/; s/500ms/05/; s/250ms/025/; s/100ms/01/; s/50ms/005/; s/10ms/001/; s/1ms/1m/; \
s/total/tl/; s/cached/ch/; s/dnssec/ds/; s/edns/es/; s/edns0/es0/; s/internal/it/; \
s/noerror/nr/; s/nodata/nd/; s/nxdomain/nx/; s/servfail/sf/; s/slow/sl/"

# get value from $1 into return variable $value
value=0
get_value ( ) {
    cur_state="${state}"
    if [ "${#}" -ge 2 ]; then
        cur_state="${2}"
    fi
    values="`grep -i "\[${1}\] => " ${cur_state} | sed -e 's/^.*] => //'`"
    value=0
    for v in ${values}; do
        if test "${v}x" = 'x'; then
            v=0
        fi
        value=`expr "${value}" + "${v}"`
    done
}

# save current state to previous
save_state ( ) {
    if [ -f "${state}" ]; then 
        cp "${state}" "${state}.prev"
    fi
}

# download the state from the kresd server instance
get_state ( ) {
    # obtain lock for fetching the state
    # because there is a race condition in fetching and writing to file

    lock="${state}.lock"

    # see if the lock is stale, if so, take it 
    if test -f "${lock}"; then
        pid="`cat $lock 2>&1`"
        kill -0 "${pid}" >/dev/null 2>&1
        if test "${?}" -ne 0 -a "${pid}" != "${$}" ; then
            echo "${$}">"${lock}"
        fi
    fi

    try_lock=0
    while test ! -f "${lock}" || test "`cat "${lock}" 2>&1`" != "${$}"; do
        i=0
        while test -f "${lock}"; do
            # wait
            i=`expr "${i}" + 1`
            if test "${i}" -gt 1000; then
                sleep 1;
            fi
            if test "${i}" -gt 1500; then
                echo "error locking ${lock} = `cat ${lock}`"
                rm -f "${lock}"
                exit 1
            fi
        done
        # try to get it
        echo "${$}">"${lock}"
        if [ ! -f "${lock}" ]; then
            try_lock=`expr "${try_lock}" + 1`
            if [ "${try_lock}" -gt 10 ]; then
                echo "can't locking ${lock}
"
                rm -f "${lock}"
                exit 1
            fi
        fi
    done

    # do not refetch if the file exists and only LEE seconds old
    now=`date +%s`
    if test -f "${state}"; then
        value=`head -1 "${state}"`
        if test "${now}" -lt `expr "${value}" + "${lee}"`; then
            rm -f "${lock}"
            return
        fi
    fi
    # save previous state
    save_state
    # get stats from all running kresd instances
    echo "${now}">"${state}"
    for socket in `ls "${kresd_control}/"`; do
        echo 'stats.list()' | "${nc_util}" -U "${kresd_control}/${socket}">>"${state}"
        if test "${?}" -ne 0; then
            echo 'error retrieving data from kresd control socket'
            rm -f "${lock}"
            exit 1
        fi
    done
    rm -f "${lock}"
}

if test "${exec_param}" = 'autoconf'; then
    if test ! -d "${kresd_control}"; then
        echo no "(${kresd_control} does not exist)"
        exit 1
    fi
    if test ! -d `dirname "${state}"`; then
        echo no "(`dirname ${state}` directory does not exist)"
        exit 1
    fi
    echo yes
    exit 0
fi

if test "${exec_param}" = 'suggest' ; then
    echo 'hits'
    echo 'by_rcode'
    echo 'by_flags'
    echo 'histogram'
    exit 0
fi

# determine my type, by name
id=`echo $0 | sed -e 's/^.*kresd_munin_//'`
if test "${id}x" = 'x'; then
    # some default to keep people sane.
    id='hits'
fi

# print label and min 0 for a name $1 in kresd format
p_config ( ) {
    mn=`echo "${1}" | sed "${ABBREV}" | tr . _`
    echo "${mn}.label" "${2}"
    echo "${mn}.min" 0
}

if test "${exec_param}" = 'config' ; then
    if test ! -f "${state}"; then
        get_state
    fi
    case "${id}" in
    hits)
        echo 'graph_title Knot Resolver DNS traffic and cache hits'
        echo 'graph_args --base 1000 -l 0'
        echo 'graph_vlabel queries / second'
        echo 'graph_category DNS'
        p_config 'request.total' 'total queries'
        p_config 'request.internal' 'self internal queries'
        p_config 'answer.total' 'total answered'
        p_config 'answer.cached' 'cache answered'
        p_config 'request.tcp' 'TCP queries'
        p_config 'request.udp' 'UDP queries'
        p_config 'request.doh' 'DoH queries'
        p_config 'request.dot' 'DoT queries'
        p_config 'query.edns' 'EDNS present'
        p_config 'query.dnssec' 'DNSSEC'
        echo 'graph_info DNS summaries of the recursive resolver.'
        ;;
    by_rcode)
        echo 'graph_title Knot Resolver DNS answers by return code'
        echo 'graph_args --base 1000 -l 0'
        echo 'graph_vlabel answer packets / second'
        echo 'graph_category DNS'
        p_config 'answer.noerror' 'NOERROR'
        p_config 'answer.nodata' 'NODATA'
        p_config 'answer.nxdomain' 'NXDOMAIN'
        p_config 'answer.cached' 'SERVFAIL'
        echo 'graph_info answers sorted by return value. rrsets bogus is the number of rrsets marked bogus per second by the validator'
        ;;
    by_flags)
        echo 'graph_title Knot Resolver DNS answers by flags'
        echo 'graph_args --base 1000 -l 0'
        echo 'graph_vlabel queries / second'
        echo 'graph_category DNS'
        p_config 'answer.aa' 'authoritative answer'
        p_config 'answer.tc' 'truncated'
        p_config 'answer.ra' 'recursion avail'
        p_config 'answer.rd' 'recursion desired'
        p_config 'answer.ad' 'auth data (DNSSEC)'
        p_config 'answer.cd' 'check disabled (DNSSEC)'
        p_config 'answer.do' 'DNSSEC OK'
        p_config 'answer.edns0' 'EDNS OPT present'
        echo 'graph_info This graphs plots the flags in answers.'
        ;;
    histogram)
        echo 'graph_title Knot Resolver DNS histogram of reply time'
        echo 'graph_args --base 1000 -l 0'
        echo 'graph_vlabel queries / second'
        echo 'graph_category DNS'
        echo a_1m.label 'less 1 ms'
        echo a_1m.min 0
        echo a_1m.draw AREA
        echo a_1m.colour 0000FF
        echo a_001.label 'less 10 ms'
        echo a_001.min 0
        echo a_001.colour 1F00DF
        echo a_001.draw STACK
        echo a_005.label 'less 50 ms'
        echo a_005.min 0
        echo a_005.draw STACK
        echo a_005.colour 3F00BF
        echo a_01.label 'less 100 ms'
        echo a_01.min 0
        echo a_01.draw STACK
        echo a_01.colour 5F009F
        echo a_025.label 'less 250 ms'
        echo a_025.min 0
        echo a_025.draw STACK
        echo a_025.colour 7F007F
        echo a_05.label 'less 500 ms'
        echo a_05.min 0
        echo a_05.draw STACK
        echo a_05.colour 9F005F
        echo a_1.label 'less 1 sec'
        echo a_1.min 0
        echo a_1.draw STACK
        echo a_1.colour BF003F
        echo a_15.label 'less 1,5 sec'
        echo a_15.min 0
        echo a_15.draw STACK
        echo a_15.colour DF001F
        echo a_sl.label 'very slow'
        echo a_sl.min 0
        echo a_sl.draw STACK
        echo a_sl.colour FF0000
        echo 'graph_info Histogram of the reply times for queries.'
        ;;
    esac

    exit 0
fi

# do the stats itself
get_state

# get the time elapsed
elapsed="${lee}"
if test -f "${state}"; then
    statetime=`head -1 "${state}"`
    prev_statetime=`expr "${statetime}" - "${elapsed}"`

    if [ -f "${state}.prev" ]; then
        prev_statetime=`head -1 "${state}.prev"`
    fi

    value=`expr "${statetime}" - "${prev_statetime}"`
    if [ "${value}" -le 0 ]; then
        echo 'error: time elapsed 0 or could not retrieve data'
        exit 1
    fi
    elapsed="${value}"
fi

# print value for $1 / elapsed
print_qps ( ) {
    mn=`echo "${1}" | sed "${ABBREV}" | tr . _`
    get_value "${1}"
    cur_value="${value}"
    get_value "${1}" "${state}.prev"
    prev_value="${value}"
    value=`expr "${cur_value}" - "${prev_value}"`
    echo "${mn}.value" `echo scale=1';' "${value}" / "${elapsed}" | bc `
}

case "${id}" in
hits)
    for x in 'request.total' 'request.internal' 'answer.total' 'answer.cached' \
'request.tcp' 'request.udp' 'request.doh' 'request.dot' 'query.edns' 'query.dnssec'
        do print_qps "${x}"
    done
    ;;
by_rcode)
    for x in 'answer.noerror' 'answer.nodata' 'answer.nxdomain' 'answer.cached'
        do print_qps "${x}"
    done
    ;;
by_flags)
    for x in 'answer.aa' 'answer.tc' 'answer.ra' 'answer.rd' 'answer.ad' 'answer.cd' \
'answer.do' 'answer.edns0'
        do print_qps "${x}"
    done
    ;;
histogram)
    for x in 'answer.1ms' 'answer.10ms' 'answer.50ms' 'answer.100ms' 'answer.250ms' \
'answer.500ms' 'answer.1000ms' 'answer.1500ms' 'answer.slow'
        do print_qps "${x}"
    done
    ;;
esac